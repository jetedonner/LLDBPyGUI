["br list", "c", "step-over", "thread step-over", "dis", "br list ", "target list ", "br list ", "dis", "target list ", "br list", "target list ", "dis", "br list", "dis", "br list", "dis", "br s -a 0x100000c9f", "br s -a 0x100000c98", "br list ", "br command add -F LLDBPyGUI.bring_app_to_front 5.1", "br s -a 0x100000c9f", "br command add -F LLDBPyGUI.bring_app_to_front 4.1", "br s -a 0x100000c98", "br command add -F LLDBPyGUI.test_cb_hello 5.1", "c", "process interrupt ", "dis", "c", "dis", "c", "dis", "process interrupt ", "dis", "process interrupt ", "dis", "process interrupt ", "c", "dis", "help process ", "process status ", "c", "process status ", "c", "process status ", "feedinput c", "c", "dis", "c", "process interrupt ", "c", "dis", "c", "help target stop-hook ", "target stop-hook list ", "help target stop-hook add ", "c", "br list ", "feedinput 1", "feedinput 100000", "feedinput 1", "feedinput 1000000", "feedinput 1", "c", "feedinput 10000000", "c", "Y", "feedinput Y", "c", "feedinput Y", "c", "feedinput Y", "c", "feedinput Y", "c", "feedinput Y", "c", "feedinput Y", "c", "feedinput Y", "c", "feedinput Y", "c", "dis", "target list ", "process continue ", "c", "br list ", "c", "dis", "br add -N $s16SwiftREPLTestApp0C8DelegateC5$mainyyFZ", "br set -N $s16SwiftREPLTestApp0C8DelegateC5$mainyyFZ", "help br add", "help breakpoint set ", "br set -n $s16SwiftREPLTestApp0C8DelegateC5$mainyyFZ", "c", "dis", "br list ", "c", "dis", "c", "dis", "process status ", "process interrupt ", "dis", "help target stop-hook add ", "watchpoint list ", "c", "watchpoint list ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "c", "process status ", "watchpoint list ", "watchpoint disable 0", "watchpoint disable 1", "watchpoint disable 0", "c", "watchpoint delete 0", "watchpoint delete 1", "watchpoint list ", "br list ", "dis", "dsf", "br set -n showMessageBox", "br set -n main", "br list", "dis", "c", "dis", "help br ", "help br set", "target list ", "thread list ", "c", "dis", "dsf", "br set -n showMessagebox", "br list ", "br set -n showMessageBox", "language ", "help language ", "language ", "language cplusplus ", "language objc ", "language objc class-table ", "language objc class-table dump ", "platform ", "platform  list ", "platform list ", "platform status ", "platform select", "platform select Here you can run LLDB commands. Type 'help' for a list of available commands.\n\n(LLDBPyGUI) dis\n_dyld_start @ dyld:\n->  0x1005acb30: mov    x0, sp\n    0x1005acb34: and    sp, x0, #0xfffffffffffffff0\n    0x1005acb38: mov    x29, #0x0 ; =0 \n    0x1005acb3c: mov    x30, #0x0 ; =0 \n    0x1005acb40: b      0x1005ad75c    ; start\n\n(LLDBPyGUI) help br\nCommands for operating on breakpoints (see 'help b' for shorthand.)\n\nSyntax: breakpoint <subcommand> [<command-options>]\n\nThe following subcommands are supported:\n\n      clear   -- Delete or disable breakpoints matching the specified source file and line.\n      command -- Commands for adding, removing and listing LLDB commands executed when a breakpoint is hit.\n      delete  -- Delete the specified breakpoint(s).  If no breakpoints are specified, delete them all.\n      disable -- Disable the specified breakpoint(s) without deleting them.  If none are specified, disable all breakpoints.\n      enable  -- Enable the specified disabled breakpoint(s). If no breakpoints are specified, enable all of them.\n      list    -- List some or all breakpoints at configurable levels of detail.\n      modify  -- Modify the options on a breakpoint or set of breakpoints in the executable.  If no breakpoint is specified, acts on the last created breakpoint.  With the\n                 exception of -e, -d and -i, passing an empty argument clears the modification.\n      name    -- Commands to manage breakpoint names\n      read    -- Read and set the breakpoints previously saved to a file with \"breakpoint write\".  \n      set     -- Sets a breakpoint or set of breakpoints in the executable.\n      write   -- Write the breakpoints listed to a file that can be read in with \"breakpoint read\".  If given no arguments, writes all breakpoints.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n\n(LLDBPyGUI) help br set\nSets a breakpoint or set of breakpoints in the executable.\n\nSyntax: breakpoint set <cmd-options>\n\nCommand Options Usage:\n  breakpoint set [-DHd] -l <linenum> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-R <address>] [-N <breakpoint-name>] [-u <column>] [-f <filename>] [-m <boolean>] [-s <shlib-name>] [-K <boolean>]\n  breakpoint set [-DHd] -a <address-expression> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-N <breakpoint-name>] [-s <shlib-name>]\n  breakpoint set [-DHd] -n <function-name> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-R <address>] [-N <breakpoint-name>] [-f <filename>] [-L <source-language>] [-s <shlib-name>] [-K <boolean>]\n  breakpoint set [-DHd] -F <fullname> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-R <address>] [-N <breakpoint-name>] [-f <filename>] [-L <source-language>] [-s <shlib-name>] [-K <boolean>]\n  breakpoint set [-DHd] -S <selector> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-R <address>] [-N <breakpoint-name>] [-f <filename>] [-L <source-language>] [-s <shlib-name>] [-K <boolean>]\n  breakpoint set [-DHd] -M <method> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-R <address>] [-N <breakpoint-name>] [-f <filename>] [-L <source-language>] [-s <shlib-name>] [-K <boolean>]\n  breakpoint set [-DHd] -r <regular-expression> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-R <address>] [-N <breakpoint-name>] [-f <filename>] [-L <source-language>] [-s <shlib-name>] [-K <boolean>]\n  breakpoint set [-DHd] -b <function-name> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-R <address>] [-N <breakpoint-name>] [-f <filename>] [-L <source-language>] [-s <shlib-name>] [-K <boolean>]\n  breakpoint set [-ADHd] -p <regular-expression> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-N <breakpoint-name>] [-f <filename>] [-m <boolean>] [-s <shlib-name>] [-X <function-name>]\n  breakpoint set [-DHd] -E <source-language> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-N <breakpoint-name>] [-h <boolean>] [-w <boolean>]\n  breakpoint set [-DHd] -P <python-class> [-k <none>] [-v <none>] [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-N <breakpoint-name>] [-f <filename>] [-s <shlib-name>]\n  breakpoint set [-DHd] -y <linespec> [-G <boolean>] [-C <command>] [-c <expr>] [-Y <source-language>] [-i <count>] [-o <boolean>] [-q <queue-name>] [-t <thread-id>] [-x <thread-index>] [-T <thread-name>] [-R <address>] [-N <breakpoint-name>] [-m <boolean>] [-s <shlib-name>] [-K <boolean>]\n\n       -A ( --all-files )\n            All files are searched for source pattern matches.\n\n       -C <command> ( --command <command> )\n            A command to run when the breakpoint is hit, can be provided more than once, the commands will be run in left-to-right order.\n\n       -D ( --dummy-breakpoints )\n            Act on Dummy breakpoints - i.e. breakpoints set before a file is provided, which prime new targets.\n\n       -E <source-language> ( --language-exception <source-language> )\n            Set the breakpoint on exceptions thrown by the specified language (without options, on throw but not catch.)\n\n       -F <fullname> ( --fullname <fullname> )\n            Set the breakpoint by fully qualified function names. For C++ this means namespaces and all arguments, and for Objective-C this means a full function prototype with\n            class and selector.  Can be repeated multiple times to make one breakpoint for multiple names.\n\n       -G <boolean> ( --auto-continue <boolean> )\n            The breakpoint will auto-continue after running its commands.\n\n       -H ( --hardware )\n            Require the breakpoint to use hardware breakpoints.\n\n       -K <boolean> ( --skip-prologue <boolean> )\n            sKip the prologue if the breakpoint is at the beginning of a function. If not set the target.skip-prologue setting is used.\n\n       -L <source-language> ( --language <source-language> )\n            Specifies the Language to use when interpreting the breakpoint's expression (note: currently only implemented for setting breakpoints on identifiers). If not set the\n            target.language setting is used.\n\n       -M <method> ( --method <method> )\n            Set the breakpoint by C++ method names.  Can be repeated multiple times to make one breakpoint for multiple methods.\n\n       -N <breakpoint-name> ( --breakpoint-name <breakpoint-name> )\n            Adds this to the list of names for this breakpoint.\n\n       -P <python-class> ( --script-class <python-class> )\n            The name of the class that will manage a scripted breakpoint.\n\n       -R <address> ( --address-slide <address> )\n            Add the specified offset to whatever address(es) the breakpoint resolves to. At present this applies the offset directly as given, and doesn't try to align it to\n            instruction boundaries.\n\n       -S <selector> ( --selector <selector> )\n            Set the breakpoint by Objective-C selector name.  Can be repeated multiple times to make one breakpoint for multiple Selectors.\n\n       -T <thread-name> ( --thread-name <thread-name> )\n            The breakpoint stops only for the thread whose thread name matches this argument.\n\n       -X <function-name> ( --source-regexp-function <function-name> )\n            When used with '-p' limits the source regex to source contained in the named functions.  Can be repeated multiple times.\n\n       -Y <source-language> ( --condition-language <source-language> )\n            Specifies the Language to use when executing the breakpoint's condition expression.\n\n       -a <address-expression> ( --address <address-expression> )\n            Set the breakpoint at the specified address.  If the address maps uniquely to a particular binary, then the address will be converted to a \u0012file\u0012address, so that the\n            breakpoint will track that binary+offset no matter where the binary eventually loads.  Alternately, if you also specify the module - with the -s option - then the\n            address will be treated as a file address in that module, and resolved accordingly.  Again, this will allow lldb to track that offset on subsequent reloads.  The\n            module need not have been loaded at the time you specify this breakpoint, and will get resolved when the module is loaded.\n\n       -b <function-name> ( --basename <function-name> )\n            Set the breakpoint by function basename (C++ namespaces and arguments will be ignored).  Can be repeated multiple times to make one breakpoint for multiple symbols.\n\n       -c <expr> ( --condition <expr> )\n            The breakpoint stops only if this condition expression evaluates to true.\n\n       -d ( --disable )\n            Disable the breakpoint.\n\n       -f <filename> ( --file <filename> )\n            Specifies the source file in which to set this breakpoint.  Note, by default lldb only looks for files that are #included if they use the standard include file\n            extensions.  To set breakpoints on .c/.cpp/.m/.mm files that are #included, set target.inline-breakpoint-strategy to \u0012always\u0012.\n\n       -h <boolean> ( --on-catch <boolean> )\n            Set the breakpoint on exception catcH.\n\n       -i <count> ( --ignore-count <count> )\n            Set the number of times this breakpoint is skipped before stopping.\n\n       -k <none> ( --structured-data-key <none> )\n            The key for a key/value pair passed to the implementation of a scripted breakpoint.  Pairs can be specified more than once.\n\n       -l <linenum> ( --line <linenum> )\n            Specifies the line number on which to set this breakpoint.\n\n       -m <boolean> ( --move-to-nearest-code <boolean> )\n            Move breakpoints to nearest code. If not set the target.move-to-nearest-code setting is used.\n\n       -n <function-name> ( --name <function-name> )\n            Set the breakpoint by function name.  Can be repeated multiple times to make one breakpoint for multiple names.\n\n       -o <boolean> ( --one-shot <boolean> )\n            The breakpoint is deleted the first time it stop causes a stop.\n\n       -p <regular-expression> ( --source-pattern-regexp <regular-expression> )\n            Set the breakpoint by specifying a regular expression which is matched against the source text in a source file or files specified with the -f can be specified more\n            than once.  If no source files are specified, uses the current \u0012default source file\u0012.  If you want to match against all source files, pass the \u0012--all-files\u0012 option.\n\n       -q <queue-name> ( --queue-name <queue-name> )\n            The breakpoint stops only for threads in the queue whose name is given by this argument.\n\n       -r <regular-expression> ( --func-regex <regular-expression> )\n            Set the breakpoint by function name, evaluating a regular-expression to find the function name(s).\n\n       -s <shlib-name> ( --shlib <shlib-name> )\n            Set the breakpoint only in this shared library.  Can repeat this option multiple times to specify multiple shared libraries.\n\n       -t <thread-id> ( --thread-id <thread-id> )\n            The breakpoint stops only for the thread whose TID matches this argument.  The token 'current' resolves to the current thread's ID.\n\n       -u <column> ( --column <column> )\n            Specifies the column number on which to set this breakpoint.\n\n       -v <none> ( --structured-data-value <none> )\n            The value for the previous key in the pair passed to the implementation of a scripted breakpoint.  Pairs can be specified more than once.\n\n       -w <boolean> ( --on-throw <boolean> )\n            Set the breakpoint on exception throW.\n\n       -x <thread-index> ( --thread-index <thread-index> )\n            The breakpoint stops only for the thread whose index matches this argument.\n\n       -y <linespec> ( --joint-specifier <linespec> )\n            A specifier in the form filename:line[:column] for setting file & line breakpoints.\n\n(LLDBPyGUI) target list\nCurrent targets:\n* target #0: /Volumes/Data/dev/python/LLDBPyGUI/_testtarget/xcode_projects/SwiftREPLTestApp/Debug/SwiftREPLTestApp.app/Contents/MacOS/SwiftREPLTestApp ( arch=arm64-apple-macosx15.1.0, platform=host, pid=35904, state=stopped )\n\n(LLDBPyGUI) thread list\nProcess 35904 stopped\n* thread #1: tid = 0xab0de0, 0x00000001005acb30 dyld`_dyld_start, stop reason = signal SIGSTOP\n\n(LLDBPyGUI) c\nProcess 35904 resuming\n\n(LLDBPyGUI) dis\nmain @ SwiftREPLTestApp.debug.dylib:\n    0x100419ec0: stp    x20, x19, [sp, #-0x20]!\n    0x100419ec4: stp    x29, x30, [sp, #0x10]\n    0x100419ec8: add    x29, sp, #0x10\n->  0x100419ecc: mov    x0, #0x0 ; =0 \n    0x100419ed0: bl     0x100419dcc    ; $s16SwiftREPLTestApp0C8DelegateCMa\n    0x100419ed4: mov    x20, x0\n    0x100419ed8: bl     0x100419e10    ; $s16SwiftREPLTestApp0C8DelegateC5$mainyyFZ\n    0x100419edc: mov    w0, #0x0 ; =0 \n    0x100419ee0: ldp    x29, x30, [sp, #0x10]\n    0x100419ee4: ldp    x20, x19, [sp], #0x20\n    0x100419ee8: ret    \n\n(LLDBPyGUI) dsf\nNo valid function at current frame.\n\n(LLDBPyGUI) br set -n showMessagebox\nBreakpoint 2: no locations (pending).\nWARNING:  Unable to resolve breakpoint to any actual locations.\n\n(LLDBPyGUI) br list\nCurrent breakpoints:\n1: name = 'main', locations = 24, resolved = 24, hit count = 1\n  1.1: where = SwiftREPLTestApp.debug.dylib`main + 12, address = 0x0000000100419ecc, resolved, hit count = 1 \n  1.2: where = Foundation`-[NSBlockOperation main], address = 0x0000000192592b08, resolved, hit count = 0 \n  1.3: where = Foundation`-[NSThread main], address = 0x00000001925a8848, resolved, hit count = 0 \n  1.4: where = Foundation`-[NSInvocationOperation main], address = 0x00000001925b9c20, resolved, hit count = 0 \n  1.5: where = Foundation`-[NSOperation main], address = 0x00000001925ba5bc, resolved, hit count = 0 \n  1.6: where = Foundation`-[_NSBarrierOperation main], address = 0x0000000192e429d8, resolved, hit count = 0 \n  1.7: where = AppKit`-[NSTextCheckingOperation main], address = 0x00000001950d34b0, resolved, hit count = 0 \n  1.8: where = AppKit`-[NSSharingServiceItemProvider main], address = 0x000000019580f86c, resolved, hit count = 0 \n  1.9: where = AppKit`-[_NSViewDrawOperation main], address = 0x0000000195b11f44, resolved, hit count = 0 \n  1.10: where = AppKit`-[NSTextCandidateOperation main], address = 0x0000000195b238d4, resolved, hit count = 0 \n  1.11: where = AppKit`-[_NSMenuServicesViewOperation main], address = 0x0000000195b6eae4, resolved, hit count = 0 \n  1.12: where = AppKit`-[_NSTextFinderAsyncSearchOperation main], address = 0x0000000195bbcd08, resolved, hit count = 0 \n  1.13: where = AppKit`-[_NSDocumentRevisionsLoadingOperation main], address = 0x0000000195c36d5c, resolved, hit count = 0 \n  1.14: where = AppKit`-[NSTabSearchFilterOperation main], address = 0x0000000195c49ed4, resolved, hit count = 0 \n  1.15: where = CoreData`-[_PFUbiquityRecordImportOperation main], address = 0x000000019839044c, resolved, hit count = 0 \n  1.16: where = CoreData`-[PFUbiquityBaselineRollOperation main], address = 0x00000001983d36ec, resolved, hit count = 0 \n  1.17: where = CoreData`-[PFUbiquityBaselineRecoveryOperation main], address = 0x00000001983e323c, resolved, hit count = 0 \n  1.18: where = CoreData`-[PFUbiquityBaselineRollResponseOperation main], address = 0x00000001983ed9b8, resolved, hit count = 0 \n  1.19: where = Security`Security::OSXCode::main(), address = 0x0000000194682be0, resolved, hit count = 0 \n  1.20: where = CarbonCore`main, address = 0x0000000194acda30, resolved, hit count = 0 \n  1.21: where = BoardServices`+[BSServiceQuality main], address = 0x00000001a81c9a18, resolved, hit count = 0 \n  1.22: where = ExtensionFoundation`-[EXFrameworkScanner main], address = 0x00000001ee847204, resolved, hit count = 0 \n  1.23: where = ExtensionFoundation`+[EXPKService main], address = 0x00000001ee855040, resolved, hit count = 0 \n  1.24: where = CoreSymbolication`CSCppExceptionSafeThread::main(), address = 0x00000001a86c7aa4, resolved, hit count = 0 \n\n2: name = 'showMessagebox', locations = 0 (pending)\n\n\n(LLDBPyGUI) br set -n showMessageBox\nBreakpoint 3: no locations (pending).\nWARNING:  Unable to resolve breakpoint to any actual locations.\n\n(LLDBPyGUI) language\nCommands specific to a source language.\n\nSyntax: language <language-name> <subcommand> [<subcommand-options>]\n\nLanguage specific subcommands may be used directly (without the `language\n<language-name>` prefix), when stopped on a frame written in that language. For\nexample, from a C++ frame, users may run `demangle` directly, instead of\n`language cplusplus demangle`.\n\nLanguage specific subcommands are only available when the command name cannot be\nmisinterpreted. Take the `demangle` command for example, if a Python command\nnamed `demangle-tree` were loaded, then the invocation `demangle` would run\n`demangle-tree`, not `language cplusplus demangle`.\n      \n\nThe following subcommands are supported:\n\n      cplusplus -- Commands for operating on the C++ language runtime.\n      objc      -- Commands for operating on the Objective-C language runtime.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n\n(LLDBPyGUI) help language\nCommands specific to a source language.\n\nSyntax: language <language-name> <subcommand> [<subcommand-options>]\n\nLanguage specific subcommands may be used directly (without the `language\n<language-name>` prefix), when stopped on a frame written in that language. For\nexample, from a C++ frame, users may run `demangle` directly, instead of\n`language cplusplus demangle`.\n\nLanguage specific subcommands are only available when the command name cannot be\nmisinterpreted. Take the `demangle` command for example, if a Python command\nnamed `demangle-tree` were loaded, then the invocation `demangle` would run\n`demangle-tree`, not `language cplusplus demangle`.\n      \n\nThe following subcommands are supported:\n\n      cplusplus -- Commands for operating on the C++ language runtime.\n      objc      -- Commands for operating on the Objective-C language runtime.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n\n(LLDBPyGUI) language\nCommands specific to a source language.\n\nSyntax: language <language-name> <subcommand> [<subcommand-options>]\n\nLanguage specific subcommands may be used directly (without the `language\n<language-name>` prefix), when stopped on a frame written in that language. For\nexample, from a C++ frame, users may run `demangle` directly, instead of\n`language cplusplus demangle`.\n\nLanguage specific subcommands are only available when the command name cannot be\nmisinterpreted. Take the `demangle` command for example, if a Python command\nnamed `demangle-tree` were loaded, then the invocation `demangle` would run\n`demangle-tree`, not `language cplusplus demangle`.\n      \n\nThe following subcommands are supported:\n\n      cplusplus -- Commands for operating on the C++ language runtime.\n      objc      -- Commands for operating on the Objective-C language runtime.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n\nAvailable Completions:\ncplusplus\nobjc\n(LLDBPyGUI) language cplusplus\nCommands for operating on the C++ language runtime.\n\nSyntax: cplusplus <subcommand> [<subcommand-options>]\n\nThe following subcommands are supported:\n\n      demangle -- Demangle a C++ mangled name.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n\n(LLDBPyGUI) language objc\nCommands for operating on the Objective-C language runtime.\n\nSyntax: objc <subcommand> [<subcommand-options>]\n\nThe following subcommands are supported:\n\n      class-table    -- Commands for operating on the Objective-C class table.\n      tagged-pointer -- Commands for operating on Objective-C tagged pointers.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n\n(LLDBPyGUI) language objc class-table\nCommands for operating on the Objective-C class table.\n\nSyntax: class-table <subcommand> [<subcommand-options>]\n\nThe following subcommands are supported:\n\n      dump -- Dump information on Objective-C classes known to the current process.\n\nFor more help on any particular subcommand, type 'help <command> <subcommand>'.\n\n(LLDBPyGUI) language objc class-table dump\nisa = 0x1f641c868 name = __IncompleteProtocol instance size = 8 num ivars = 0 superclass = NSObject\nisa = 0x1f641c8b8 name = Protocol instance size = 8 num ivars = 0 superclass = NSObject\nisa = 0x1f641c930 name = NSObject instance size = 8 num ivars = 1\nisa = 0x1f641c958 name = __NSUnrecognizedTaggedPointer instance size = 8 num ivars = 0 superclass = NSObject\nisa = 0x1f6421188 name = __NSStackBlock__ instance size = 8 num ivars = 0 superclass = NSBlock\nisa = 0x1f64211d8 name = __NSMallocBlock__ instance size = 8 num ivars = 0 superclass = NSBlock\nisa = 0x1f6421228 name = __NSAutoBlock__ instance size = 8 num ivars = 0 superclass = NSBlock\nisa = 0x1f6421278 name = __NSFinalizingBlock__ instance size = 8 num ivars = 0 superclass = __NSAutoBlock__\nisa = 0x1f64212c8 name = __NSGlobalBlock__ instance size = 8 num ivars = 0 superclass = NSBlock\nisa = 0x1f6421318 name = __NSBlockVariable__ instance size = 48 num ivars = 5 superclass = NSObject\nisa = 0x1f6421358 name = OS_xpc_object instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f64213a8 name = OS_xpc_null instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f64213f8 name = OS_xpc_bool instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421448 name = OS_xpc_int64 instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421498 name = OS_xpc_uint64 instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f64214e8 name = OS_xpc_double instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421538 name = OS_xpc_pointer instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421588 name = OS_xpc_date instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f64215d8 name = OS_xpc_data instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421628 name = OS_xpc_string instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421678 name = OS_xpc_uuid instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f64216c8 name = OS_xpc_fd instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421718 name = OS_xpc_shmem instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421768 name = OS_xpc_mach_send instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f64217b8 name = OS_xpc_array instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421808 name = OS_xpc_dictionary instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421858 name = OS_xpc_error instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f64218a8 name = OS_xpc_connection instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f64218f8 name = OS_xpc_endpoint instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421948 name = OS_xpc_serializer instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421998 name = OS_xpc_pipe instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f64219e8 name = OS_xpc_mach_recv instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421a38 name = OS_xpc_bundle instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421a88 name = OS_xpc_service instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421ad8 name = OS_xpc_service_instance instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421b28 name = OS_xpc_activity instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421b78 name = OS_xpc_file_transfer instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421bc8 name = OS_xpc_mach_send_once instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421c18 name = OS_xpc_rich_error instance size = 8 num ivars = 0 superclass = OS_xpc_object\nisa = 0x1f6421c68 name = OS_xpc_event_publisher instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6421cb8 name = OS_os_transaction instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6421d08 name = OS_xpc_listener instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6421d58 name = OS_xpc_session instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6421da8 name = OS_xpc_payload instance size = 8 num ivars = 0 superclass = NSObject\nisa = 0x1f6421e80 name = OS_os_log instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6421ed0 name = OS_os_activity instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6422600 name = OS_dispatch_object instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6422628 name = OS_dispatch_semaphore instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422670 name = OS_dispatch_group instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f64226b8 name = OS_dispatch_queue instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422718 name = OS_dispatch_workloop instance size = 8 num ivars = 0 superclass = OS_dispatch_queue_serial_executor\nisa = 0x1f6422778 name = OS_dispatch_queue_serial_executor instance size = 8 num ivars = 0 superclass = OS_dispatch_queue\nisa = 0x1f64227d8 name = OS_dispatch_queue_serial instance size = 8 num ivars = 0 superclass = OS_dispatch_queue_serial_executor\nisa = 0x1f6422838 name = OS_dispatch_queue_concurrent instance size = 8 num ivars = 0 superclass = OS_dispatch_queue\nisa = 0x1f6422898 name = OS_dispatch_queue_cooperative instance size = 8 num ivars = 0 superclass = OS_dispatch_queue\nisa = 0x1f64228f8 name = OS_dispatch_queue_global instance size = 8 num ivars = 0 superclass = OS_dispatch_queue\nisa = 0x1f6422958 name = OS_dispatch_queue_pthread_root instance size = 8 num ivars = 0 superclass = OS_dispatch_queue\nisa = 0x1f64229b8 name = OS_dispatch_queue_main instance size = 8 num ivars = 0 superclass = OS_dispatch_queue_serial\nisa = 0x1f6422a18 name = OS_dispatch_queue_runloop instance size = 8 num ivars = 0 superclass = OS_dispatch_queue_serial\nisa = 0x1f6422a78 name = OS_dispatch_queue_mgr instance size = 8 num ivars = 0 superclass = OS_dispatch_queue_serial\nisa = 0x1f6422ad8 name = OS_dispatch_queue_attr instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422b20 name = OS_dispatch_source instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422b80 name = OS_dispatch_channel instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422be0 name = OS_dispatch_mach instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422c40 name = OS_dispatch_mach_msg instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422c88 name = OS_dispatch_io instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422cd0 name = OS_dispatch_operation instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422d18 name = OS_dispatch_disk instance size = 8 num ivars = 0 superclass = OS_dispatch_object\nisa = 0x1f6422d60 name = OS_object instance size = 8 num ivars = 0 superclass = NSObject\nisa = 0x1f6422d88 name = OS_voucher instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6422db0 name = OS_os_eventlink instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6422dd8 name = OS_os_workgroup instance size = 8 num ivars = 0 superclass = OS_object\nisa = 0x1f6422e00 name = OS_os_workgroup_interval instance size = 8 num ivars = 0 superclass = OS_os_workgroup\nisa = 0x1f6422e28 name = OS_os_workgroup_parallel instance size = 8 num ivars = 0 superclass = OS_os_workgroup\nisa = 0x1f6422e50 name = OS_dispatch_data instance size = 8 num ivars = 0 superclass = _NSDispatchData\nisa = 0x1f6422e78 name = OS_dispatch_data_empty instance size = 8 num ivars = 0 superclass = OS_dispatch_data\nisa = 0x1f64380b0 name = __NSArray0 instance size = 8 num ivars = 0 superclass = NSArray\nisa = 0x1f6438100 name = __NSOrderedSetI instance size = 16 num ivars = 1 superclass = NSOrderedSet\nisa = 0x1f6438178 name = NSTaggedPointerStringCStringContainer instance size = 24 num ivars = 1 superclass = NSObject\nisa = 0x1f64381a0 name = __NSArrayM instance size = 40 num ivars = 0 superclass = NSMutableArray\nisa = 0x1f64381c8 name = __NSFrozenArrayM instance size = 40 num ivars = 0 superclass = NSArray\nisa = 0x1f6438240 name = __NSPlaceholderArray instance size = 8 num ivars = 0 superclass = NSMutableArray\nisa = 0x1f6438290 name = __NSDictionaryI instance size = 16 num ivars = 1 superclass = NSDictionary\nisa = 0x1f64382e0 name = __NSSingleObjectSetI instance size = 16 num ivars = 1 superclass = NSSet\nisa = 0x1f6438358 name = __NSDictionary0 instance size = 8 num ivars = 0 superclass = NSDictionary\nisa = 0x1f6438380 name = __NSPlaceholderSet instance size = 8 num ivars = 0 superclass = NSMutableSet\nisa = 0x1f64383d0 name = CFPDPurgeableBuffer instance size = 26 num ivars = 4 superclass = CFPDDataBuffer\nisa = 0x1f6438420 name = CFPDDataBuffer instance size = 8 num ivars = 0 superclass = NSObject\nisa = 0x1f6438470 name = __NSSingleEntryDictionaryI instance size = 24 num ivars = 2 superclass = NSDictionary\nisa = 0x1f64384c0 name = __NSCFDictionary instance size = 56 num ivars = 6 superclass = NSMutableDictionary\nisa = 0x1f6438510 name = __CFNotification instance size = 33 num ivars = 4 superclass = NSNotification\nisa = 0x1f64385b0 name = __NSCFString instance size = 8 num ivars = 0 superclass = NSMutableString\nisa = 0x1f64385d8 name = __NSCFConstantString instance size = 8 num ivars = 0 superclass = __NSCFString\nisa = 0x1f6438628 name = __NSCFAttributedString instance size = 8 num ivars = 0 superclass = NSMutableAttributedString\nisa = 0x1f6438650 name = __NSCFNumber instance size = 8 num ivars = 0 superclass = NSNumber\nisa = 0x1f64386c8 name = __NSCFBoolean instance size = 8 num ivars = 0 superclass = NSNumber\nisa = 0x1f6438718 name = __NSCFError instance size = 8 num ivars = 0 superclass = NSError\nisa = 0x1f6438740 name = __NSCFCharacterSet instance size = 8 num ivars = 0 superclass = NSMutableCharacterSet\nisa = 0x1f6438790 name = __NSCFData instance size = 48 num ivars = 5 superclass = NSMutableData\nisa = 0x1f6438808 name = __NSCFTimer instance size = 8 num ivars = 0 superclass = NSTimer\nisa = 0x1f6438858 name = __NSCFInputStream instance size = 136 num ivars = 0 superclass = NSInputStream\nisa = 0x1f64388a8 name = __NSCFOutputStream instance size = 136 num ivars = 0 superclass = NSOutputStream\nisa = 0x1f64388f8 name = __NSCFLocale instance size = 8 num ivars = 0 superclass = NSLocale\nisa = 0x1f6438920 name = _CFPasteboardCache instance size = 48 num ivars = 6 superclass = NSObject\nisa = 0x1f6438948 name = _CFPasteboardEntry instance size = 92 num ivars = 13 superclass = NSObject\nisa = 0x1f64389c0 name = __NSDictionaryObjectEnumerator instance size = 240 num ivars = 0 superclass = __NSFastEnumerationEnumerator\nisa = 0x1f6438a38 name = __NSCFArray instance size = 8 num ivars = 0 superclass = NSMutableArray\nisa = 0x1f6438a60 name = __NSOrderedSetReverseEnumerator instance size = 24 num ivars = 2 superclass = NSEnumerator\nisa = 0x1f6438ab0 name = __NSSetI instance size = 16 num ivars = 1 superclass = NSSet\nisa = 0x1f6438b00 name = __NSOrderedSetM instance size = 32 num ivars = 0 superclass = NSMutableOrderedSet\nisa = 0x1f6438b50 name = CFPrefsSource instance size = 57 num ivars = 4 superclass = NSObject\nisa = 0x1f6438ba0 name = __NSDate instance size = 16 num ivars = 1 superclas", "platform select darwin", "platform status ", "dis", "c", "dis", "thread step-over ", "dis", "thread step-out", "dis", "thread step-out", "dis", "thread step-out", "dis", "thread step-out", "dis", "thread step-out", "dis", "thread step-out", "dis", "thread step-out", "dis", "c", "dis", "br set -n showMessageBox", "dsf", "watchpoint list ", "watchpoint ", "watchpoint set ", "watchpoint set expression 0x104a9f12e", "settings set target.language swift", "expression -l swift -- 1 + 2", "dis", "c", "dis", "c", "dis", "c", "dis", "c"]